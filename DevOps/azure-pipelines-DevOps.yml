# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  bkstrgrg: 'TerraformMiniProject-Matthew'
  bkstrg: 'miniprojectstorage3425'
  bkcontainer: 'tfstate'
  bkstrgkey: 'devpipeline.terraform.tfstate'

stages:
  - stage: tfvalidate
    jobs:
     - job: validate
       continueOnError: false
       steps:
         - task: TerraformInstaller@1
           displayName: terraform Install
           inputs:
             terraformVersion: 'latest'
         - task: TerraformTaskV4@4
           displayName: terraform init
           inputs:
             provider: 'azurerm'
             command: 'init'
             workingDirectory: '$(System.DefaultWorkingDirectory)/Devops'
             backendServiceArm: 'Terraform Matthew'
             backendAzureRmResourceGroupName: 'TerraformMiniProject-Matthew'
             backendAzureRmStorageAccountName: '$(bkstrg)'
             backendAzureRmContainerName: '$(bkcontainer)'
             backendAzureRmKey: '$(bkstrgkey)'

         - task: TerraformTaskV4@4
           displayName: validate
           inputs:
             provider: 'azurerm'
             command: 'validate'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: TerraformInstaller@1
            displayName: terraform Install
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: terraform init
            inputs:
             provider: 'azurerm'
             command: 'init'
             workingDirectory: '$(System.DefaultWorkingDirectory)/Devops'
             backendServiceArm: 'Terraform Matthew'
             backendAzureRmResourceGroupName: 'TerraformMiniProject-Matthew'
             backendAzureRmStorageAccountName: '$(bkstrg)'
             backendAzureRmContainerName: '$(bkcontainer)'
             backendAzureRmKey: '$(bkstrgkey)'
          - task: TerraformTaskV4@4
            displayName: plan terraform
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Devops'
              environmentServiceNameAzureRM: 'Terraform Matthew'
          - task: TerraformTaskV4@4
            displayName: apply Terraform
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/Devops'
              environmentServiceNameAzureRM: 'Terraform Matthew'
